x-restart-policy: &restart_policy
  restart: unless-stopped

services:
  postgres:
    << : *restart_policy
    image: postgres:13-alpine
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_DB: monty
      POSTGRES_PASSWORD: monty
      POSTGRES_USER: monty
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monty -d monty"]
      interval: 1s
      timeout: 1s
      retries: 10

  redis:
    << : *restart_policy
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
    command:
      --save 60 1
    volumes:
      - redis:/data
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]"]
      interval: 1s
      timeout: 1s
      retries: 5

  mitmproxy:
    << : *restart_policy
    image: mitmproxy/mitmproxy:latest
    hostname: mitmproxy
    command: ["mitmweb", "--web-host", "0.0.0.0", "--set", "web_password=monty-proxy"]
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:8081:8081"

  snekbox:
    << : *restart_policy
    image: ghcr.io/onerandomusername/snekbox:latest
    hostname: snekbox
    privileged: true
    ports:
     - "127.0.0.1:8060:8060"
    init: true
    ipc: none
    environment:
      PYTHONDONTWRITEBYTECODE: 1
    volumes:
      - user-base:/snekbox/user_base

  monty:
    << : *restart_policy
    container_name: monty-python
    image: ghcr.io/onerandomusername/monty-python:latest
    build:
      context: .
      dockerfile: Dockerfile
    tty: true

    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
      mitmproxy:
        condition: service_started

    environment:
      - REDIS_URI=redis://redis:6379
      - DB_BIND=postgresql+asyncpg://monty:monty@postgres:5432/monty
      - USE_FAKEREDIS=false
      - SNEKBOX_URL=http://snekbox:8060/
      - BOT_PROXY_URL=http://mitmproxy:8080/

    env_file:
      - .env

    volumes:
      - ./monty:/bot/monty

volumes:
  user-base:
  redis:
